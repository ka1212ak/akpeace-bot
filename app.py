from flask import Flask, request
import telegram
from telegram import ReplyKeyboardMarkup, TelegramError
import os
import asyncio
import httpx
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
client = httpx.AsyncClient(limits=httpx.Limits(max_connections=50, max_keepalive_connections=20))

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
bot = telegram.Bot(token=TOKEN, request_kwargs={"client": client})

# –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
semaphore = asyncio.Semaphore(10)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def send_message_with_retry(chat_id, text, buttons=None, retries=3, delay=2):
    async with semaphore:
        for attempt in range(retries):
            try:
                if buttons:
                    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                    await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
                else:
                    await bot.send_message(chat_id=chat_id, text=text)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            except TelegramError as e:
                if attempt < retries - 1:
                    logger.warning(f"–û—à–∏–±–∫–∞ {e}, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    await asyncio.sleep(delay)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    raise

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
@app.route("/", methods=["POST"])
def webhook():
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    data = request.get_json()
    if not data:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return "No data", 400

    # –ü–∞—Ä—Å–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    update = telegram.Update.de_json(data, bot)
    if not update or not update.message:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
        return "Invalid update", 400

    chat_id = update.message.chat.id
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = [["ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "üõç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"], ["ü•ó –ü–æ–¥–±–æ—Ä –µ–¥—ã", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    async def process_response():
        try:
            if text == "/start":
                await send_message_with_retry(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:", main_menu)
            elif text == "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç":
                await send_message_with_retry(chat_id, "–Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å.")
            elif text == "üõç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å":
                await send_message_with_retry(chat_id, "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
            elif text == "ü•ó –ü–æ–¥–±–æ—Ä –µ–¥—ã":
                await send_message_with_retry(chat_id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–∞—Ü–∏–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ.")
            elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
                await send_message_with_retry(chat_id, "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
            else:
                await send_message_with_retry(chat_id, "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é.", main_menu)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    asyncio.run(process_response())

    return "OK", 200

# –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.teardown_appcontext
def shutdown_client(exception=None):
    try:
        asyncio.run(client.aclose())
        logger.info("HTTP-–∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

if __name__ == "__main__":
    # Render –∑–∞–¥–∞–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
