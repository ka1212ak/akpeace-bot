from flask import Flask, request
import telegram
from telegram import ReplyKeyboardMarkup
import os
import asyncio
import httpx
from telegram import Bot
import asyncio

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
client = httpx.AsyncClient(limit=50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
bot = Bot(token="YOUR_BOT_TOKEN", request_kwargs={"client": client})

TOKEN = os.getenv("BOT_TOKEN")
bot = telegram.Bot(token=TOKEN)
app = Flask(__name__)

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)
semaphore = asyncio.Semaphore(10)

async def send_message(chat_id, text, buttons=None):
    async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if buttons:
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
        else:
            await bot.send_message(chat_id=chat_id, text=text)
from telegram import TelegramError

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def send_message_with_retry(chat_id, text, retries=3, delay=2):
    for attempt in range(retries):
        try:
            await bot.send_message(chat_id, text)
            return  # –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        except TelegramError as e:
            if attempt < retries - 1:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
                continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                raise  # –í –∫–æ–Ω—Ü–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
# –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
semaphore = asyncio.Semaphore(10)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–º–∞—Ñ–æ—Ä–∞
async def send_message(chat_id, text):
    async with semaphore:
        await send_message_with_retry(chat_id, text)

@app.route("/", methods=["POST"])
async def webhook():
    update = telegram.Update.de_json(request.get_json(), bot)
    chat_id = update.message.chat.id
    text = update.message.text

    main_menu = [["ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "üõç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"], ["ü•ó –ü–æ–¥–±–æ—Ä –µ–¥—ã", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]]

    if text == "/start":
        await send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:", main_menu)
    elif text == "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç":
        await send_message(chat_id, "–Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å.")
    elif text == "üõç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å":
        await send_message(chat_id, "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
    elif text == "ü•ó –ü–æ–¥–±–æ—Ä –µ–¥—ã":
        await send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–∞—Ü–∏–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ.")
    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await send_message(chat_id, "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
    else:
        await send_message(chat_id, "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é.")

    return "OK"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)

